// Code generated by github.com/kralicky/codegen/cli. DO NOT EDIT.
// source: github.com/kralicky/protoconfig/apis/core/v1/core.proto

package corev1

import (
	flagutil "github.com/kralicky/codegen/pkg/flagutil"
	pflag "github.com/spf13/pflag"
	strings "strings"
)

func (in *Reference) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("Reference", pflag.ExitOnError)
	fs.SortFlags = true
	fs.StringVar(&in.Id, strings.Join(append(prefix, "id"), "."), "", "")
	return fs
}

func (in *Revision) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("Revision", pflag.ExitOnError)
	fs.SortFlags = true
	fs.Var(flagutil.IntPtrValue(nil, &in.Revision), strings.Join(append(prefix, "revision"), "."), "A numerical revision uniquely identifying a specific version of the resource.")
	return fs
}

func (in *ReactiveWatchRequest) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("ReactiveWatchRequest", pflag.ExitOnError)
	fs.SortFlags = true
	fs.BoolVar(&in.Bind, strings.Join(append(prefix, "bind"), "."), false, "If true, uses [reactive.Bind] to watch all paths at once.")
	fs.StringSliceVar(&in.Paths, strings.Join(append(prefix, "paths"), "."), nil, "List of paths to watch. These must be in fieldmask format.")
	return fs
}

func (in *ReactiveEvent) FlagSet(prefix ...string) *pflag.FlagSet {
	fs := pflag.NewFlagSet("ReactiveEvent", pflag.ExitOnError)
	fs.SortFlags = true
	fs.Int32Var(&in.Index, strings.Join(append(prefix, "index"), "."), 0, "The path that triggered this event, as an index into the request path list.")
	return fs
}
